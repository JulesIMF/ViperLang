/*++

Copyright (c) 2023 JulesIMF, MIPT

Module Name:

    AstVisitor.hpp

Abstract:



Author / Creation date:

    JulesIMF / 18.03.23

Revision History:

--*/

#pragma once

//
// Includes / usings
//

#include <Trees/BasicTree.hpp>

//
// Definitions
//

namespace Parse
{
//
// Pre-declaration
// This code is generated by Source/Misc/asttypes.py
//

class File;
class SuperStmtList;
class SuperStmt;
class StmtList;
class StmtBlock;
class FncDef;
class Stmt;
class StmtSemiColon;
class StmtColon;
class Ret;
class Break;
class Continue;
class CallStmt;
class ArgPassList;
class VarDecl;
class Asgn;
class If;
class While;
class For;
class ArgDefList;
class Type;
class Expr;
using Cond = Expr;
class Logc;
class Comp;
class Form;
class Term;
class Prim;
class Unary;
class CallExpr;
class Imm;
class Int;
class Float;
class Char;
class String;
class Var;

//
// This code is generated by Source/Misc/asttypes.py
//

class AstVisitor : public Visitor
{
public:
    virtual void
    File(File*)
    {
    }

    virtual void
    SuperStmtList(SuperStmtList*)
    {
    }

    virtual void
    StmtList(StmtList*)
    {
    }

    virtual void
    StmtBlock(StmtBlock*)
    {
    }

    virtual void
    FncDef(FncDef*)
    {
    }

    virtual void
    Ret(Ret*)
    {
    }

    virtual void
    Break(Break*)
    {
    }

    virtual void
    Continue(Continue*)
    {
    }

    virtual void
    CallStmt(CallStmt*)
    {
    }

    virtual void
    ArgPassList(ArgPassList*)
    {
    }

    virtual void
    VarDecl(VarDecl*)
    {
    }

    virtual void
    Asgn(Asgn*)
    {
    }

    virtual void
    If(If*)
    {
    }

    virtual void
    While(While*)
    {
    }

    virtual void
    For(For*)
    {
    }

    virtual void
    ArgDefList(ArgDefList*)
    {
    }

    virtual void
    Type(Type*)
    {
    }

    virtual void
    Logc(Logc*)
    {
    }

    virtual void
    Comp(Comp*)
    {
    }

    virtual void
    Form(Form*)
    {
    }

    virtual void
    Term(Term*)
    {
    }

    virtual void
    Unary(Unary*)
    {
    }

    virtual void
    CallExpr(CallExpr*)
    {
    }

    virtual void
    Int(Int*)
    {
    }

    virtual void
    Float(Float*)
    {
    }

    virtual void
    Char(Char*)
    {
    }

    virtual void
    String(String*)
    {
    }

    virtual void
    Var(Var*)
    {
    }
};
}  // namespace Parse